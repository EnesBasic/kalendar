"use client";
import React from "react";

function MainComponent({
  operators = [],
  initialData = [],
  onSave = () => {},
  onOperatorAssigned = () => {},
  className = "",
}) {
  const [data, setData] = React.useState(initialData);
  const [searchTerm, setSearchTerm] = React.useState("");
  const [showSearch, setShowSearch] = React.useState(false);
  const [isDragging, setIsDragging] = React.useState(false);
  const [draggedOperator, setDraggedOperator] = React.useState(null);
  const [dragTarget, setDragTarget] = React.useState(null);

  const filteredOperators = React.useMemo(() => {
    if (!searchTerm.trim()) return operators;
    return operators.filter((operator) =>
      operator.toLowerCase().includes(searchTerm.toLowerCase())
    );
  }, [operators, searchTerm]);

  const handleDragStart = (e, operator) => {
    setIsDragging(true);
    setDraggedOperator(operator);
    e.dataTransfer.setData("text/plain", operator);
    e.dataTransfer.effectAllowed = "move";
  };

  const handleDragEnd = () => {
    setIsDragging(false);
    setDraggedOperator(null);
    setDragTarget(null);
  };

  const handleDragOver = (e, dateIndex, shiftIndex, vehicleId) => {
    e.preventDefault();
    setDragTarget({ dateIndex, shiftIndex, vehicleId });
  };

  const handleDrop = (e, dateIndex, shiftIndex, vehicleId) => {
    e.preventDefault();
    const operator = e.dataTransfer.getData("text/plain") || draggedOperator;

    if (!operator) return;

    const newData = [...data];
    if (!newData[dateIndex]) return;
    if (!newData[dateIndex].shifts[shiftIndex]) return;

    newData[dateIndex].shifts[shiftIndex].operators[vehicleId] = operator;

    setData(newData);
    onOperatorAssigned({
      date: newData[dateIndex].date,
      day: newData[dateIndex].day,
      shift: newData[dateIndex].shifts[shiftIndex].time,
      vehicle: vehicleId,
      operator,
    });

    handleDragEnd();
  };

  const handleClearCell = (dateIndex, shiftIndex, vehicleId) => {
    const newData = [...data];
    newData[dateIndex].shifts[shiftIndex].operators[vehicleId] = "";
    setData(newData);
  };

  const handleSave = () => {
    onSave(data);
  };

  return (
    <div className={`bg-[#121214] text-white ${className}`}>
      {/* Compact Operator Drag Section */}
      <div className="operator-drag-container bg-[#1D1D1F] rounded-lg p-1 mb-2 h-[20px] flex items-center">
        <div className="flex items-center justify-between w-full">
          <span className="text-[10px] font-medium text-white mr-1 whitespace-nowrap">
            Operatori:
          </span>

          <div
            className="flex-1 overflow-x-auto h-[20px] flex items-center"
            style={{ scrollbarWidth: "none" }}
          >
            <div className="flex gap-1 h-full items-center">
              {filteredOperators.length > 0 ? (
                filteredOperators.map((operator, index) => (
                  <div
                    key={index}
                    draggable
                    onDragStart={(e) => handleDragStart(e, operator)}
                    onDragEnd={handleDragEnd}
                    className="bg-[#2A2A2A] text-white text-[8px] rounded px-1 py-0.5 h-[16px] cursor-grab hover:bg-[#3A3A3A] active:cursor-grabbing flex items-center whitespace-nowrap"
                  >
                    <i className="fas fa-user-circle mr-0.5 text-[#67e8f9] text-[8px]"></i>
                    {operator}
                  </div>
                ))
              ) : (
                <div className="text-gray-400 text-[8px] text-center">
                  No operators found
                </div>
              )}
            </div>
          </div>

          {showSearch ? (
            <div className="relative ml-1 flex-shrink-0">
              <input
                type="text"
                placeholder="Search..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-[80px] bg-[#2A2A2A] text-white text-[8px] rounded px-1 py-0.5 h-[16px] focus:outline-none focus:ring-1 focus:ring-[#67e8f9]"
              />
              <button
                className="absolute right-1 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white"
                onClick={() => {
                  setSearchTerm("");
                  setShowSearch(false);
                }}
              >
                <i className="fas fa-times text-[8px]"></i>
              </button>
            </div>
          ) : (
            <button
              onClick={() => setShowSearch(true)}
              className="text-[#67e8f9] hover:text-[#a5f3ff] text-[8px] ml-1 flex-shrink-0"
            >
              <i className="fas fa-search"></i>
            </button>
          )}
        </div>
      </div>

      {/* Schedule Table */}
      <div className="overflow-x-auto">
        <table className="min-w-full border-collapse">
          <thead>
            <tr className="bg-[#1D1D1F]">
              <th className="px-2 py-1 text-left text-xs font-medium text-gray-300 uppercase tracking-wider border-b border-[#2A2A2A]">
                Date
              </th>
              <th className="px-2 py-1 text-left text-xs font-medium text-gray-300 uppercase tracking-wider border-b border-[#2A2A2A]">
                Shift
              </th>
              <th className="px-2 py-1 text-left text-xs font-medium text-gray-300 uppercase tracking-wider border-b border-[#2A2A2A]">
                Vehicles
              </th>
            </tr>
          </thead>
          <tbody>
            {data.map((dateItem, dateIndex) => (
              <React.Fragment key={dateIndex}>
                {dateItem.shifts.map((shift, shiftIndex) => (
                  <tr
                    key={`${dateIndex}-${shiftIndex}`}
                    className="bg-[#1A1A1A] hover:bg-[#222222]"
                  >
                    {shiftIndex === 0 && (
                      <td
                        className="px-2 py-1 text-sm border-b border-[#2A2A2A] align-top"
                        rowSpan={dateItem.shifts.length}
                      >
                        <div className="font-medium">{dateItem.date}</div>
                        <div className="text-xs text-gray-400">
                          {dateItem.day}
                        </div>
                      </td>
                    )}
                    <td className="px-2 py-1 text-sm border-b border-[#2A2A2A]">
                      {shift.time}
                    </td>
                    <td className="px-2 py-1 border-b border-[#2A2A2A]">
                      <div className="grid grid-cols-1 gap-1">
                        {Object.entries(shift.operators).map(
                          ([vehicleId, operator], index) => (
                            <div
                              key={vehicleId}
                              className={`p-1 rounded ${
                                dragTarget &&
                                dragTarget.dateIndex === dateIndex &&
                                dragTarget.shiftIndex === shiftIndex &&
                                dragTarget.vehicleId === vehicleId &&
                                isDragging
                                  ? "bg-[#3A3A3A]"
                                  : "bg-[#2A2A2A]"
                              }`}
                              onDragOver={(e) =>
                                handleDragOver(
                                  e,
                                  dateIndex,
                                  shiftIndex,
                                  vehicleId
                                )
                              }
                              onDrop={(e) =>
                                handleDrop(e, dateIndex, shiftIndex, vehicleId)
                              }
                            >
                              <div className="flex items-center justify-between">
                                <span className="text-xs font-medium text-gray-400">
                                  {vehicleId}:
                                </span>
                                <div className="flex-1 ml-2">
                                  {operator ? (
                                    <div className="flex items-center justify-between">
                                      <span className="text-xs">
                                        {operator}
                                      </span>
                                      <button
                                        onClick={() =>
                                          handleClearCell(
                                            dateIndex,
                                            shiftIndex,
                                            vehicleId
                                          )
                                        }
                                        className="text-gray-400 hover:text-white ml-1"
                                      >
                                        <i className="fas fa-times text-xs"></i>
                                      </button>
                                    </div>
                                  ) : (
                                    <span className="text-xs text-gray-500 italic">
                                      Drop operator here
                                    </span>
                                  )}
                                </div>
                              </div>
                            </div>
                          )
                        )}
                      </div>
                    </td>
                  </tr>
                ))}
              </React.Fragment>
            ))}
          </tbody>
        </table>
      </div>

      <div className="mt-4 flex justify-end">
        <button
          onClick={handleSave}
          className="bg-[#67e8f9] hover:bg-[#a5f3ff] text-black font-medium py-1 px-4 rounded text-sm"
        >
          Save Schedule
        </button>
      </div>
    </div>
  );
}

function StoryComponent() {
  const operators = [
    "John Doe",
    "Jane Smith",
    "Mark Johnson",
    "Emily Wilson",
    "Michael Brown",
    "Sarah Davis",
    "Robert Miller",
    "Jennifer Garcia",
  ];

  const mockData = [
    {
      date: "01.01",
      day: "P",
      shifts: [
        {
          time: "08.00-16.00",
          operators: {
            "M58-J-467": "John Doe",
            "M53-E-929": "Jane Smith",
            "A35-J-924": "",
          },
        },
        {
          time: "20.00-04.00",
          operators: {
            "M58-J-467": "",
            "M53-E-929": "Mark Johnson",
            "A35-J-924": "",
          },
        },
      ],
    },
    {
      date: "02.01",
      day: "U",
      shifts: [
        {
          time: "08.00-16.00",
          operators: {
            "M58-J-467": "Jane Smith",
            "M53-E-929": "",
            "A35-J-924": "John Doe",
          },
        },
        {
          time: "20.00-04.00",
          operators: {
            "M58-J-467": "Mark Johnson",
            "M53-E-929": "",
            "A35-J-924": "",
          },
        },
      ],
    },
    {
      date: "03.01",
      day: "S",
      shifts: [
        {
          time: "08.00-16.00",
          operators: {
            "M58-J-467": "Emily Wilson",
            "M53-E-929": "Michael Brown",
            "A35-J-924": "",
          },
        },
        {
          time: "20.00-04.00",
          operators: {
            "M58-J-467": "",
            "M53-E-929": "Sarah Davis",
            "A35-J-924": "Robert Miller",
          },
        },
      ],
    },
  ];

  const handleSave = (data) => {
    console.log("Saving schedule data:", data);
  };

  const handleOperatorAssigned = (assignment) => {
    console.log("Operator assigned:", assignment);
  };

  return (
    <div className="p-4 bg-[#121214] min-h-screen">
      <h2 className="text-white text-xl mb-4">BinBin with Compact Operators</h2>

      <div className="mb-8">
        <h3 className="text-white text-lg mb-2">Default View</h3>
        <MainComponent
          operators={operators}
          initialData={mockData}
          onSave={handleSave}
          onOperatorAssigned={handleOperatorAssigned}
        />
      </div>

      <div className="mb-8">
        <h3 className="text-white text-lg mb-2">With Few Operators</h3>
        <MainComponent
          operators={operators.slice(0, 3)}
          initialData={mockData.slice(0, 1)}
          onSave={handleSave}
          onOperatorAssigned={handleOperatorAssigned}
        />
      </div>

      <div>
        <h3 className="text-white text-lg mb-2">With Many Operators</h3>
        <MainComponent
          operators={[
            ...operators,
            ...operators.map((op) => `${op} (Shift 2)`),
          ]}
          initialData={mockData}
          onSave={handleSave}
          onOperatorAssigned={handleOperatorAssigned}
        />
      </div>
    </div>
  );
}

export default MainComponent;