"use client";
import React from "react";

function MainComponent({
  initialData = [],
  initialOperators = [],
  onSave,
  onWeekChange,
  availableWeeks = [],
}) {
  const [data, setData] = React.useState(initialData);
  const [operators, setOperators] = React.useState(initialOperators);
  const [newOperator, setNewOperator] = React.useState("");
  const [selectedWeek, setSelectedWeek] = React.useState(null);
  const [isEditing, setIsEditing] = React.useState(false);
  const [isDragging, setIsDragging] = React.useState(false);
  const [dragTarget, setDragTarget] = React.useState(null);
  const [showConfirmSave, setShowConfirmSave] = React.useState(false);
  const [showConfirmReset, setShowConfirmReset] = React.useState(false);
  const [showWeekSelector, setShowWeekSelector] = React.useState(false);

  React.useEffect(() => {
    setData(initialData);
  }, [initialData]);

  React.useEffect(() => {
    setOperators(initialOperators);
  }, [initialOperators]);

  const handleAddOperator = () => {
    if (newOperator.trim() && !operators.includes(newOperator.trim())) {
      setOperators([...operators, newOperator.trim()]);
      setNewOperator("");
    }
  };

  const handleRemoveOperator = (operatorToRemove) => {
    setOperators(operators.filter((op) => op !== operatorToRemove));

    const updatedData = data.map((day) => ({
      ...day,
      shifts: day.shifts.map((shift) => ({
        ...shift,
        operators: Object.fromEntries(
          Object.entries(shift.operators).map(([vehicle, operator]) => [
            vehicle,
            operator === operatorToRemove ? "" : operator,
          ])
        ),
      })),
    }));

    setData(updatedData);
  };

  const handleDragStart = (e, operator) => {
    setIsDragging(true);
    e.dataTransfer.setData("text/plain", operator);
  };

  const handleDragOver = (e, day, shiftIndex, vehicle) => {
    e.preventDefault();
    setDragTarget({ day, shiftIndex, vehicle });
  };

  const handleDragLeave = () => {
    setDragTarget(null);
  };

  const handleDrop = (e, dayIndex, shiftIndex, vehicle) => {
    e.preventDefault();
    const operator = e.dataTransfer.getData("text/plain");

    if (!operators.includes(operator)) return;

    const updatedData = [...data];
    updatedData[dayIndex].shifts[shiftIndex].operators[vehicle] = operator;

    setData(updatedData);
    setIsDragging(false);
    setDragTarget(null);
  };

  const handleCellClick = (dayIndex, shiftIndex, vehicle) => {
    if (!isEditing) return;

    const updatedData = [...data];
    updatedData[dayIndex].shifts[shiftIndex].operators[vehicle] = "";
    setData(updatedData);
  };

  const handleSave = () => {
    if (onSave) {
      onSave(data);
    }
    setShowConfirmSave(false);
    setIsEditing(false);
  };

  const handleReset = () => {
    setData(initialData);
    setShowConfirmReset(false);
    setIsEditing(false);
  };

  const handleWeekSelect = (week) => {
    setSelectedWeek(week);
    if (onWeekChange) {
      onWeekChange(week);
    }
    setShowWeekSelector(false);
  };

  const getVehicles = () => {
    if (data.length === 0 || data[0].shifts.length === 0) return [];
    return Object.keys(data[0].shifts[0].operators);
  };

  const vehicles = getVehicles();

  return (
    <div className="bg-[#121214] text-white rounded-lg shadow-lg overflow-hidden">
      <div className="p-4 bg-[#1D1D1F] border-b border-[#2A2A2A] flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3">
        <div>
          <h2 className="text-lg font-semibold text-white flex items-center">
            <i className="fas fa-calendar-alt mr-2 text-[#67e8f9]"></i>
            Schedule Manager
          </h2>
          <p className="text-sm text-gray-400 mt-1">
            Manage operator assignments for the week
          </p>
        </div>

        <div className="flex flex-wrap gap-2">
          <button
            onClick={() => setShowWeekSelector(true)}
            className="bg-[#2A2A2A] hover:bg-[#3A3A3A] text-white px-3 py-1.5 rounded text-sm flex items-center"
          >
            <i className="fas fa-calendar-week mr-1.5 text-[#67e8f9]"></i>
            {selectedWeek ? `Week ${selectedWeek.weekNumber}` : "Select Week"}
          </button>

          <button
            onClick={() => setIsEditing(!isEditing)}
            className={`px-3 py-1.5 rounded text-sm flex items-center ${
              isEditing
                ? "bg-[#67e8f9] hover:bg-[#a5f3ff] text-[#121214]"
                : "bg-[#2A2A2A] hover:bg-[#3A3A3A] text-white"
            }`}
          >
            <i className={`fas fa-${isEditing ? "check" : "edit"} mr-1.5`}></i>
            {isEditing ? "Editing" : "Edit"}
          </button>

          {isEditing && (
            <>
              <button
                onClick={() => setShowConfirmSave(true)}
                className="bg-[#10b981] hover:bg-[#0d9668] text-white px-3 py-1.5 rounded text-sm flex items-center"
              >
                <i className="fas fa-save mr-1.5"></i>
                Save
              </button>

              <button
                onClick={() => setShowConfirmReset(true)}
                className="bg-[#ef4444] hover:bg-[#dc2626] text-white px-3 py-1.5 rounded text-sm flex items-center"
              >
                <i className="fas fa-undo mr-1.5"></i>
                Reset
              </button>
            </>
          )}
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-[1fr_3fr] gap-4 p-4">
        <div className="space-y-4">
          {isEditing && (
            <div className="bg-[#1D1D1F] rounded-lg p-3">
              <h3 className="text-white text-sm font-medium mb-2">
                Add New Operator
              </h3>
              <div className="flex">
                <input
                  type="text"
                  value={newOperator}
                  onChange={(e) => setNewOperator(e.target.value)}
                  placeholder="Enter operator name"
                  className="flex-1 bg-[#2A2A2A] text-white text-sm rounded-l px-3 py-1.5 focus:outline-none focus:ring-1 focus:ring-[#67e8f9]"
                />
                <button
                  onClick={handleAddOperator}
                  className="bg-[#67e8f9] hover:bg-[#a5f3ff] text-[#121214] px-3 py-1.5 rounded-r text-sm"
                >
                  <i className="fas fa-plus"></i>
                </button>
              </div>

              <div className="mt-3">
                <h4 className="text-white text-xs font-medium mb-1.5">
                  Manage Operators:
                </h4>
                <div className="flex flex-wrap gap-1.5">
                  {operators.map((operator, index) => (
                    <div
                      key={index}
                      className="bg-[#2A2A2A] text-white text-xs rounded px-2 py-1 flex items-center"
                      draggable
                      onDragStart={(e) => handleDragStart(e, operator)}
                    >
                      <span className="mr-1.5">{operator}</span>
                      <button
                        onClick={() => handleRemoveOperator(operator)}
                        className="text-gray-400 hover:text-[#ef4444]"
                      >
                        <i className="fas fa-times"></i>
                      </button>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}
        </div>

        <div className="bg-[#1D1D1F] rounded-lg overflow-x-auto">
          <table className="min-w-full border-collapse">
            <thead>
              <tr className="bg-[#2A2A2A]">
                <th className="py-2 px-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider border-b border-[#3A3A3A] sticky left-0 bg-[#2A2A2A] z-10">
                  Date/Day
                </th>
                <th className="py-2 px-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider border-b border-[#3A3A3A]">
                  Shift
                </th>
                {vehicles.map((vehicle) => (
                  <th
                    key={vehicle}
                    className="py-2 px-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider border-b border-[#3A3A3A]"
                  >
                    {vehicle}
                  </th>
                ))}
              </tr>
            </thead>
            <tbody>
              {data.map((day, dayIndex) =>
                day.shifts.map((shift, shiftIndex) => (
                  <tr
                    key={`${dayIndex}-${shiftIndex}`}
                    className={`${
                      dayIndex % 2 === 0 ? "bg-[#1D1D1F]" : "bg-[#232327]"
                    } hover:bg-[#2A2A2A]`}
                  >
                    {shiftIndex === 0 && (
                      <td
                        className="py-2 px-3 text-sm border-b border-[#3A3A3A] sticky left-0 z-10"
                        style={{
                          backgroundColor:
                            dayIndex % 2 === 0 ? "#1D1D1F" : "#232327",
                        }}
                        rowSpan={day.shifts.length}
                      >
                        <div className="font-medium">{day.date}</div>
                        <div className="text-gray-400 text-xs">{day.day}</div>
                      </td>
                    )}
                    <td className="py-2 px-3 text-sm border-b border-[#3A3A3A]">
                      {shift.time}
                    </td>
                    {vehicles.map((vehicle) => (
                      <td
                        key={`${dayIndex}-${shiftIndex}-${vehicle}`}
                        className={`py-2 px-3 text-sm border-b border-[#3A3A3A] ${
                          isEditing ? "cursor-pointer" : ""
                        } ${
                          dragTarget &&
                          dragTarget.day === dayIndex &&
                          dragTarget.shiftIndex === shiftIndex &&
                          dragTarget.vehicle === vehicle
                            ? "bg-[#3A3A3A]"
                            : ""
                        }`}
                        onClick={() =>
                          handleCellClick(dayIndex, shiftIndex, vehicle)
                        }
                        onDragOver={(e) =>
                          handleDragOver(e, dayIndex, shiftIndex, vehicle)
                        }
                        onDragLeave={handleDragLeave}
                        onDrop={(e) =>
                          handleDrop(e, dayIndex, shiftIndex, vehicle)
                        }
                      >
                        {shift.operators[vehicle] ? (
                          <div className="flex items-center">
                            <i className="fas fa-user-circle mr-1.5 text-[#67e8f9]"></i>
                            {shift.operators[vehicle]}
                          </div>
                        ) : isEditing ? (
                          <div className="text-gray-500 italic text-xs">
                            Drop operator here
                          </div>
                        ) : null}
                      </td>
                    ))}
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>

      {showConfirmSave && (
        <div className="fixed inset-0 bg-black/70 flex items-center justify-center z-50">
          <div className="bg-[#1D1D1F] rounded-lg p-4 max-w-md w-full mx-4">
            <h3 className="text-lg font-medium text-white mb-2">
              Save Changes?
            </h3>
            <p className="text-gray-300 mb-4">
              Are you sure you want to save these changes to the schedule?
            </p>
            <div className="flex justify-end gap-3">
              <button
                onClick={() => setShowConfirmSave(false)}
                className="bg-[#2A2A2A] hover:bg-[#3A3A3A] text-white px-4 py-2 rounded"
              >
                Cancel
              </button>
              <button
                onClick={handleSave}
                className="bg-[#10b981] hover:bg-[#0d9668] text-white px-4 py-2 rounded"
              >
                Save
              </button>
            </div>
          </div>
        </div>
      )}

      {showConfirmReset && (
        <div className="fixed inset-0 bg-black/70 flex items-center justify-center z-50">
          <div className="bg-[#1D1D1F] rounded-lg p-4 max-w-md w-full mx-4">
            <h3 className="text-lg font-medium text-white mb-2">
              Reset Changes?
            </h3>
            <p className="text-gray-300 mb-4">
              Are you sure you want to reset all changes? This action cannot be
              undone.
            </p>
            <div className="flex justify-end gap-3">
              <button
                onClick={() => setShowConfirmReset(false)}
                className="bg-[#2A2A2A] hover:bg-[#3A3A3A] text-white px-4 py-2 rounded"
              >
                Cancel
              </button>
              <button
                onClick={handleReset}
                className="bg-[#ef4444] hover:bg-[#dc2626] text-white px-4 py-2 rounded"
              >
                Reset
              </button>
            </div>
          </div>
        </div>
      )}

      {showWeekSelector && (
        <div className="fixed inset-0 bg-black/70 flex items-center justify-center z-50">
          <div className="bg-[#1D1D1F] rounded-lg p-4 max-w-md w-full mx-4">
            <div className="flex justify-between items-center mb-3">
              <h3 className="text-lg font-medium text-white">Select Week</h3>
              <button
                onClick={() => setShowWeekSelector(false)}
                className="text-gray-400 hover:text-white"
              >
                <i className="fas fa-times"></i>
              </button>
            </div>

            {availableWeeks.length > 0 ? (
              <div className="max-h-60 overflow-y-auto">
                {availableWeeks.map((week, index) => (
                  <button
                    key={index}
                    onClick={() => handleWeekSelect(week)}
                    className="w-full text-left p-2 hover:bg-[#2A2A2A] rounded mb-1 flex items-center"
                  >
                    <i className="fas fa-calendar-week mr-2 text-[#67e8f9]"></i>
                    <div>
                      <div className="text-white">Week {week.weekNumber}</div>
                      <div className="text-gray-400 text-xs">
                        {week.dateRange}
                      </div>
                    </div>
                  </button>
                ))}
              </div>
            ) : (
              <div className="text-gray-400 text-center py-4">
                No weeks available
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
}

function StoryComponent() {
  const [mockData, setMockData] = React.useState([
    {
      date: "01.01",
      day: "Mon",
      shifts: [
        {
          time: "08:00-16:00",
          operators: {
            "M58-J-467": "John Doe",
            "M53-E-929": "Jane Smith",
            "A35-J-924": "",
          },
        },
        {
          time: "20:00-04:00",
          operators: {
            "M58-J-467": "",
            "M53-E-929": "Mark Johnson",
            "A35-J-924": "",
          },
        },
      ],
    },
    {
      date: "02.01",
      day: "Tue",
      shifts: [
        {
          time: "08:00-16:00",
          operators: {
            "M58-J-467": "Jane Smith",
            "M53-E-929": "",
            "A35-J-924": "John Doe",
          },
        },
        {
          time: "20:00-04:00",
          operators: {
            "M58-J-467": "Mark Johnson",
            "M53-E-929": "",
            "A35-J-924": "",
          },
        },
      ],
    },
    {
      date: "03.01",
      day: "Wed",
      shifts: [
        {
          time: "08:00-16:00",
          operators: {
            "M58-J-467": "Mark Johnson",
            "M53-E-929": "John Doe",
            "A35-J-924": "",
          },
        },
        {
          time: "20:00-04:00",
          operators: {
            "M58-J-467": "",
            "M53-E-929": "Jane Smith",
            "A35-J-924": "",
          },
        },
      ],
    },
  ]);

  const mockOperators = ["John Doe", "Jane Smith", "Mark Johnson"];

  const mockAvailableWeeks = [
    { weekNumber: 1, year: 2025, dateRange: "01.01 - 07.01" },
    { weekNumber: 2, year: 2025, dateRange: "08.01 - 14.01" },
    { weekNumber: 3, year: 2025, dateRange: "15.01 - 21.01" },
  ];

  const handleSave = (data) => {
    console.log("Saving data:", data);
    setMockData(data);
  };

  const handleWeekChange = (week) => {
    console.log("Week changed to:", week);
  };

  return (
    <div className="p-4 bg-[#121214] min-h-screen">
      <h2 className="text-white text-xl mb-4">
        BinBin with Compact Operator Drag
      </h2>

      <div className="mb-8">
        <MainComponent
          initialData={mockData}
          initialOperators={mockOperators}
          onSave={handleSave}
          onWeekChange={handleWeekChange}
          availableWeeks={mockAvailableWeeks}
        />
      </div>

      <div className="mb-8">
        <h3 className="text-white text-lg mb-2">Empty State</h3>
        <MainComponent
          initialData={[]}
          initialOperators={mockOperators}
          onSave={handleSave}
          onWeekChange={handleWeekChange}
          availableWeeks={mockAvailableWeeks}
        />
      </div>

      <div>
        <h3 className="text-white text-lg mb-2">No Available Weeks</h3>
        <MainComponent
          initialData={mockData}
          initialOperators={mockOperators}
          onSave={handleSave}
          onWeekChange={handleWeekChange}
          availableWeeks={[]}
        />
      </div>
    </div>
  );
}

export default MainComponent;