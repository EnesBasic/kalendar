"use client";
import React from "react";

function MainComponent({
  initialData = [],
  initialOperators = [],
  onSave,
  onWeekChange,
  availableWeeks = [],
}) {
  const [data, setData] = React.useState(initialData);
  const [operators, setOperators] = React.useState(initialOperators);
  const [newOperator, setNewOperator] = React.useState("");
  const [selectedWeek, setSelectedWeek] = React.useState(null);
  const [isEditing, setIsEditing] = React.useState(false);
  const [searchTerm, setSearchTerm] = React.useState("");
  const [showOperatorPanel, setShowOperatorPanel] = React.useState(true);
  const [draggedOperator, setDraggedOperator] = React.useState(null);
  const [hoveredCell, setHoveredCell] = React.useState(null);

  const operatorColors = React.useMemo(() => {
    const colors = [
      "#4a9eff",
      "#10b981",
      "#8b5cf6",
      "#f43f5e",
      "#fbbf24",
      "#06b6d4",
      "#ec4899",
      "#f97316",
      "#14b8a6",
      "#6366f1",
    ];

    return operators.reduce((acc, operator, index) => {
      acc[operator] = colors[index % colors.length];
      return acc;
    }, {});
  }, [operators]);

  const filteredOperators = React.useMemo(() => {
    if (!searchTerm.trim()) return operators;
    return operators.filter((operator) =>
      operator.toLowerCase().includes(searchTerm.toLowerCase())
    );
  }, [operators, searchTerm]);

  const handleAddOperator = () => {
    if (newOperator.trim() && !operators.includes(newOperator.trim())) {
      setOperators([...operators, newOperator.trim()]);
      setNewOperator("");
    }
  };

  const handleRemoveOperator = (operatorToRemove) => {
    setOperators(operators.filter((op) => op !== operatorToRemove));

    // Remove this operator from all shifts in the data
    const updatedData = data.map((day) => ({
      ...day,
      shifts: day.shifts.map((shift) => ({
        ...shift,
        operators: Object.fromEntries(
          Object.entries(shift.operators).map(([machine, operator]) => [
            machine,
            operator === operatorToRemove ? "" : operator,
          ])
        ),
      })),
    }));

    setData(updatedData);
  };

  const handleDragStart = (e, operator) => {
    setDraggedOperator(operator);
    e.dataTransfer.setData("text/plain", operator);
    e.dataTransfer.effectAllowed = "move";
  };

  const handleDragOver = (e, day, shiftIndex, machine) => {
    e.preventDefault();
    setHoveredCell({ day, shiftIndex, machine });
  };

  const handleDragLeave = () => {
    setHoveredCell(null);
  };

  const handleDrop = (e, dayIndex, shiftIndex, machine) => {
    e.preventDefault();
    setHoveredCell(null);

    if (!draggedOperator) return;

    const updatedData = [...data];
    updatedData[dayIndex].shifts[shiftIndex].operators[machine] =
      draggedOperator;
    setData(updatedData);
    setDraggedOperator(null);
  };

  const handleCellClick = (dayIndex, shiftIndex, machine) => {
    if (!isEditing) return;

    const updatedData = [...data];
    updatedData[dayIndex].shifts[shiftIndex].operators[machine] = "";
    setData(updatedData);
  };

  const handleSave = () => {
    if (onSave) {
      onSave(data);
    }
  };

  const handleWeekSelect = (week) => {
    setSelectedWeek(week);
    if (onWeekChange) {
      onWeekChange(week);
    }
  };

  return (
    <div className="bg-[#121214] text-white rounded-lg shadow-lg overflow-hidden">
      <div className="p-4 bg-[#1D1D1F] border-b border-[#2A2A2A] flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3">
        <div className="flex items-center">
          <h2 className="text-lg font-semibold text-[#67e8f9]">
            Schedule Manager
          </h2>
          {selectedWeek && (
            <span className="ml-2 text-sm text-gray-300">
              Week {selectedWeek.weekNumber}, {selectedWeek.year}
            </span>
          )}
        </div>

        <div className="flex items-center gap-2">
          <select
            className="bg-[#2A2A2A] text-white text-sm rounded px-3 py-1.5 focus:outline-none focus:ring-1 focus:ring-[#67e8f9]"
            onChange={(e) => {
              const selected = availableWeeks[parseInt(e.target.value)];
              if (selected) handleWeekSelect(selected);
            }}
            value={availableWeeks.findIndex(
              (w) =>
                selectedWeek &&
                w.weekNumber === selectedWeek.weekNumber &&
                w.year === selectedWeek.year
            )}
          >
            <option value="">Select Week</option>
            {availableWeeks.map((week, index) => (
              <option key={index} value={index}>
                Week {week.weekNumber}, {week.year} ({week.dateRange})
              </option>
            ))}
          </select>

          <button
            className={`px-3 py-1.5 rounded text-sm font-medium ${
              isEditing
                ? "bg-[#f43f5e] hover:bg-[#e11d48]"
                : "bg-[#2A2A2A] hover:bg-[#3A3A3A]"
            }`}
            onClick={() => setIsEditing(!isEditing)}
          >
            {isEditing ? (
              <>
                <i className="fas fa-times mr-1"></i>Cancel
              </>
            ) : (
              <>
                <i className="fas fa-edit mr-1"></i>Edit
              </>
            )}
          </button>

          {isEditing && (
            <button
              className="bg-[#10b981] hover:bg-[#059669] px-3 py-1.5 rounded text-sm font-medium"
              onClick={handleSave}
            >
              <i className="fas fa-save mr-1"></i>Save
            </button>
          )}

          <button
            className="bg-[#2A2A2A] hover:bg-[#3A3A3A] px-3 py-1.5 rounded text-sm font-medium"
            onClick={() => setShowOperatorPanel(!showOperatorPanel)}
          >
            <i
              className={`fas fa-users mr-1 ${
                showOperatorPanel ? "text-[#67e8f9]" : ""
              }`}
            ></i>
            Operators
          </button>
        </div>
      </div>

      <div className="flex flex-col md:flex-row">
        <div className="flex-grow overflow-x-auto">
          <table className="min-w-full border-collapse">
            <thead>
              <tr className="bg-[#1D1D1F]">
                <th className="py-2 px-3 text-left text-sm font-medium text-gray-300 border-b border-[#2A2A2A]">
                  Date
                </th>
                <th className="py-2 px-3 text-left text-sm font-medium text-gray-300 border-b border-[#2A2A2A]">
                  Day
                </th>
                <th className="py-2 px-3 text-left text-sm font-medium text-gray-300 border-b border-[#2A2A2A]">
                  Shift
                </th>
                <th className="py-2 px-3 text-left text-sm font-medium text-gray-300 border-b border-[#2A2A2A]">
                  M58-J-467
                </th>
                <th className="py-2 px-3 text-left text-sm font-medium text-gray-300 border-b border-[#2A2A2A]">
                  M53-E-929
                </th>
                <th className="py-2 px-3 text-left text-sm font-medium text-gray-300 border-b border-[#2A2A2A]">
                  A35-J-924
                </th>
              </tr>
            </thead>
            <tbody>
              {data.map((day, dayIndex) =>
                day.shifts.map((shift, shiftIndex) => (
                  <tr
                    key={`${dayIndex}-${shiftIndex}`}
                    className={`${
                      shiftIndex % 2 === 0 ? "bg-[#1A1A1C]" : "bg-[#1D1D1F]"
                    } hover:bg-[#2A2A2A]`}
                  >
                    {shiftIndex === 0 && (
                      <>
                        <td
                          className="py-2 px-3 text-sm border-b border-[#2A2A2A]"
                          rowSpan={day.shifts.length}
                        >
                          {day.date}
                        </td>
                        <td
                          className="py-2 px-3 text-sm border-b border-[#2A2A2A]"
                          rowSpan={day.shifts.length}
                        >
                          {day.day}
                        </td>
                      </>
                    )}
                    <td className="py-2 px-3 text-sm border-b border-[#2A2A2A]">
                      {shift.time}
                    </td>
                    {Object.entries(shift.operators).map(
                      ([machine, operator], index) => (
                        <td
                          key={machine}
                          className={`py-2 px-3 text-sm border-b border-[#2A2A2A] ${
                            hoveredCell &&
                            hoveredCell.day === dayIndex &&
                            hoveredCell.shiftIndex === shiftIndex &&
                            hoveredCell.machine === machine
                              ? "bg-[#3A3A3A]"
                              : ""
                          }`}
                          onDragOver={(e) =>
                            handleDragOver(e, dayIndex, shiftIndex, machine)
                          }
                          onDragLeave={handleDragLeave}
                          onDrop={(e) =>
                            handleDrop(e, dayIndex, shiftIndex, machine)
                          }
                          onClick={() =>
                            handleCellClick(dayIndex, shiftIndex, machine)
                          }
                        >
                          {operator ? (
                            <div
                              className="inline-flex items-center px-2 py-1 rounded-full text-xs"
                              style={{
                                backgroundColor: operatorColors[operator]
                                  ? `${operatorColors[operator]}20`
                                  : "#2A2A2A",
                                borderLeft: `3px solid ${
                                  operatorColors[operator] || "#67e8f9"
                                }`,
                              }}
                            >
                              <i
                                className="fas fa-user-circle mr-1"
                                style={{
                                  color: operatorColors[operator] || "#67e8f9",
                                }}
                              ></i>
                              {operator}
                              {isEditing && (
                                <button
                                  className="ml-1 text-gray-400 hover:text-white"
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    const updatedData = [...data];
                                    updatedData[dayIndex].shifts[
                                      shiftIndex
                                    ].operators[machine] = "";
                                    setData(updatedData);
                                  }}
                                >
                                  <i className="fas fa-times text-xs"></i>
                                </button>
                              )}
                            </div>
                          ) : (
                            <div className="h-6 flex items-center text-gray-500">
                              {isEditing ? "Drop operator here" : "—"}
                            </div>
                          )}
                        </td>
                      )
                    )}
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>

        {showOperatorPanel && (
          <div className="w-full md:w-64 bg-[#1D1D1F] border-t md:border-t-0 md:border-l border-[#2A2A2A] p-3">
            <div className="mb-3">
              <h3 className="text-sm font-medium text-white mb-2">
                Operator Management
              </h3>

              <div className="flex items-center mb-2">
                <input
                  type="text"
                  value={newOperator}
                  onChange={(e) => setNewOperator(e.target.value)}
                  placeholder="Add new operator"
                  className="flex-grow bg-[#2A2A2A] text-white text-sm rounded-l px-3 py-1.5 focus:outline-none focus:ring-1 focus:ring-[#67e8f9]"
                  onKeyPress={(e) => {
                    if (e.key === "Enter") handleAddOperator();
                  }}
                />
                <button
                  className="bg-[#67e8f9] hover:bg-[#a5f3ff] text-[#121214] px-3 py-1.5 rounded-r text-sm font-medium"
                  onClick={handleAddOperator}
                >
                  <i className="fas fa-plus"></i>
                </button>
              </div>

              <div className="relative mb-2">
                <input
                  type="text"
                  placeholder="Search operators..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full bg-[#2A2A2A] text-white text-sm rounded px-3 py-1.5 focus:outline-none focus:ring-1 focus:ring-[#67e8f9]"
                />
                {searchTerm && (
                  <button
                    className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white"
                    onClick={() => setSearchTerm("")}
                  >
                    <i className="fas fa-times"></i>
                  </button>
                )}
              </div>
            </div>

            <div
              className="overflow-y-auto max-h-[calc(100vh-300px)]"
              style={{
                scrollbarWidth: "thin",
                scrollbarColor: "#67e8f9 #2A2A2A",
              }}
            >
              <h4 className="text-xs font-medium text-gray-400 mb-1">
                Drag operators to schedule:
              </h4>
              <div className="flex flex-wrap gap-1.5">
                {filteredOperators.length > 0 ? (
                  filteredOperators.map((operator, index) => (
                    <div
                      key={index}
                      draggable
                      onDragStart={(e) => handleDragStart(e, operator)}
                      className="inline-flex items-center px-2 py-1 rounded-full text-xs cursor-grab active:cursor-grabbing"
                      style={{
                        backgroundColor: `${operatorColors[operator]}20`,
                        borderLeft: `3px solid ${operatorColors[operator]}`,
                      }}
                    >
                      <i
                        className="fas fa-user-circle mr-1"
                        style={{ color: operatorColors[operator] }}
                      ></i>
                      {operator}
                      {isEditing && (
                        <button
                          className="ml-1 text-gray-400 hover:text-white"
                          onClick={() => handleRemoveOperator(operator)}
                        >
                          <i className="fas fa-times text-xs"></i>
                        </button>
                      )}
                    </div>
                  ))
                ) : (
                  <div className="text-gray-400 text-xs w-full text-center py-2">
                    No operators found
                  </div>
                )}
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

function StoryComponent() {
  const [mockData, setMockData] = React.useState([
    {
      date: "01.01",
      day: "P",
      shifts: [
        {
          time: "08.00-16.00",
          operators: {
            "M58-J-467": "John Doe",
            "M53-E-929": "Jane Smith",
            "A35-J-924": "",
          },
        },
        {
          time: "20.00-04.00",
          operators: {
            "M58-J-467": "",
            "M53-E-929": "Mark Johnson",
            "A35-J-924": "",
          },
        },
      ],
    },
    {
      date: "02.01",
      day: "U",
      shifts: [
        {
          time: "08.00-16.00",
          operators: {
            "M58-J-467": "Jane Smith",
            "M53-E-929": "",
            "A35-J-924": "John Doe",
          },
        },
        {
          time: "20.00-04.00",
          operators: {
            "M58-J-467": "Mark Johnson",
            "M53-E-929": "",
            "A35-J-924": "",
          },
        },
      ],
    },
  ]);

  const mockOperators = [
    "John Doe",
    "Jane Smith",
    "Mark Johnson",
    "Emily Wilson",
    "Michael Brown",
  ];

  const mockAvailableWeeks = [
    { weekNumber: 1, year: 2025, dateRange: "01.01 - 07.01" },
    { weekNumber: 2, year: 2025, dateRange: "08.01 - 14.01" },
    { weekNumber: 3, year: 2025, dateRange: "15.01 - 21.01" },
  ];

  const handleSave = (data) => {
    console.log("Saving data:", data);
    setMockData(data);
  };

  const handleWeekChange = (week) => {
    console.log("Week changed:", week);
  };

  return (
    <div className="p-4 bg-[#121214] min-h-screen">
      <h1 className="text-white text-2xl mb-6">
        BinBin with Compact Operators
      </h1>

      <div className="mb-8">
        <h2 className="text-white text-xl mb-4">Default View</h2>
        <MainComponent
          initialData={mockData}
          initialOperators={mockOperators}
          onSave={handleSave}
          onWeekChange={handleWeekChange}
          availableWeeks={mockAvailableWeeks}
        />
      </div>

      <div className="mb-8">
        <h2 className="text-white text-xl mb-4">With More Operators</h2>
        <MainComponent
          initialData={mockData}
          initialOperators={[
            ...mockOperators,
            "Sarah Davis",
            "Robert Miller",
            "Jennifer Garcia",
            "William Martinez",
            "Elizabeth Anderson",
          ]}
          onSave={handleSave}
          onWeekChange={handleWeekChange}
          availableWeeks={mockAvailableWeeks}
        />
      </div>

      <div>
        <h2 className="text-white text-xl mb-4">Empty State</h2>
        <MainComponent
          initialData={[]}
          initialOperators={[]}
          onSave={handleSave}
          onWeekChange={handleWeekChange}
          availableWeeks={mockAvailableWeeks}
        />
      </div>
    </div>
  );
}

export default MainComponent;
