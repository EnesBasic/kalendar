"use client";
import React from "react";

function MainComponent({
  initialOperators = [],
  initialData = [],
  availableWeeks = [],
  onSave = () => {},
  onWeekChange = () => {},
}) {
  const [operators, setOperators] = React.useState(initialOperators);
  const [data, setData] = React.useState(initialData);
  const [editMode, setEditMode] = React.useState(false);
  const [draggedOperator, setDraggedOperator] = React.useState(null);
  const [selectedWeek, setSelectedWeek] = React.useState(null);
  const [showWeekSelector, setShowWeekSelector] = React.useState(false);
  const [notes, setNotes] = React.useState("");
  const [showNotes, setShowNotes] = React.useState(false);
  const [isEdited, setIsEdited] = React.useState(false);
  const [showSaveConfirmation, setShowSaveConfirmation] = React.useState(false);
  const [showTemplateModal, setShowTemplateModal] = React.useState(false);
  const [templates, setTemplates] = React.useState([]);
  const [templateName, setTemplateName] = React.useState("");
  const [loadingTemplates, setLoadingTemplates] = React.useState(false);
  const [selectedTemplate, setSelectedTemplate] = React.useState(null);
  const [showApplyTemplateModal, setShowApplyTemplateModal] =
    React.useState(false);

  React.useEffect(() => {
    if (availableWeeks && availableWeeks.length > 0) {
      setSelectedWeek(availableWeeks[0]);
    }
  }, [availableWeeks]);

  const handleDragStart = (e, operator) => {
    setDraggedOperator(operator);
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = "move";
  };

  const handleDrop = (e, dayIndex, shiftIndex, vehicleKey) => {
    e.preventDefault();
    if (!editMode) return;

    const operator = e.dataTransfer.getData("text/plain") || draggedOperator;
    if (!operator) return;

    const newData = [...data];
    if (newData[dayIndex] && newData[dayIndex].shifts[shiftIndex]) {
      newData[dayIndex].shifts[shiftIndex].operators[vehicleKey] = operator;
      setData(newData);
      setIsEdited(true);
    }
  };

  const handleCellClick = (dayIndex, shiftIndex, vehicleKey) => {
    if (!editMode) return;

    const newData = [...data];
    if (newData[dayIndex] && newData[dayIndex].shifts[shiftIndex]) {
      newData[dayIndex].shifts[shiftIndex].operators[vehicleKey] = "";
      setData(newData);
      setIsEdited(true);
    }
  };

  const handleAddOperator = () => {
    const name = prompt("Enter operator name:");
    if (name && name.trim() !== "") {
      setOperators([...operators, name.trim()]);
    }
  };

  const handleRemoveOperator = (index) => {
    const newOperators = [...operators];
    newOperators.splice(index, 1);
    setOperators(newOperators);
  };

  const handleSave = () => {
    onSave(data);
    setIsEdited(false);
    setShowSaveConfirmation(true);
    setTimeout(() => {
      setShowSaveConfirmation(false);
    }, 3000);
  };

  const handleWeekChange = (week) => {
    if (isEdited) {
      if (
        window.confirm("You have unsaved changes. Continue without saving?")
      ) {
        setSelectedWeek(week);
        onWeekChange(week);
        setIsEdited(false);
      }
    } else {
      setSelectedWeek(week);
      onWeekChange(week);
    }
  };

  const fetchTemplates = async () => {
    setLoadingTemplates(true);
    try {
      const response = await fetch("/api/getTemplates", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
      });
      const result = await response.json();
      if (result.success) {
        setTemplates(result.templates);
      } else {
        console.error("Failed to fetch templates:", result.error);
      }
    } catch (error) {
      console.error("Error fetching templates:", error);
    } finally {
      setLoadingTemplates(false);
    }
  };

  const saveAsTemplate = async () => {
    if (!templateName.trim()) {
      alert("Please enter a template name");
      return;
    }

    try {
      const response = await fetch("/api/saveTemplate", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: templateName,
          data: data,
        }),
      });
      const result = await response.json();
      if (result.success) {
        alert("Template saved successfully");
        setTemplateModal(false);
        setTemplateName("");
      } else {
        alert(`Failed to save template: ${result.error}`);
      }
    } catch (error) {
      console.error("Error saving template:", error);
      alert("Error saving template");
    }
  };

  const handleApplyTemplate = async () => {
    if (!selectedTemplate) {
      alert("Please select a template");
      return;
    }

    try {
      const response = await fetch("/api/applyTemplate", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          templateId: selectedTemplate,
        }),
      });
      const result = await response.json();
      if (result.success) {
        setData(result.data);
        setIsEdited(true);
        setShowApplyTemplateModal(false);
        setSelectedTemplate(null);
      } else {
        alert(`Failed to apply template: ${result.error}`);
      }
    } catch (error) {
      console.error("Error applying template:", error);
      alert("Error applying template");
    }
  };

  const handleDeleteTemplate = async (templateId) => {
    if (!window.confirm("Are you sure you want to delete this template?")) {
      return;
    }

    try {
      const response = await fetch("/api/deleteTemplate", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          templateId,
        }),
      });
      const result = await response.json();
      if (result.success) {
        fetchTemplates();
      } else {
        alert(`Failed to delete template: ${result.error}`);
      }
    } catch (error) {
      console.error("Error deleting template:", error);
      alert("Error deleting template");
    }
  };

  const getVehicleKeys = () => {
    const keys = new Set();
    data.forEach((day) => {
      day.shifts.forEach((shift) => {
        Object.keys(shift.operators).forEach((key) => {
          keys.add(key);
        });
      });
    });
    return Array.from(keys);
  };

  const vehicleKeys = getVehicleKeys();

  return (
    <div className="bg-[#121214] text-white p-2 sm:p-3 rounded-lg shadow-lg">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-2 gap-2">
        <div className="flex items-center">
          <h2 className="text-lg font-semibold mr-2">
            {selectedWeek
              ? `Week ${selectedWeek.weekNumber} (${selectedWeek.dateRange})`
              : "Schedule"}
          </h2>
          <button
            onClick={() => setShowWeekSelector(!showWeekSelector)}
            className="bg-[#1D1D1F] hover:bg-[#2a2a2a] text-[#67e8f9] px-2 py-1 rounded text-xs flex items-center"
          >
            <i className="fas fa-calendar-week mr-1"></i>
            Change Week
          </button>
        </div>
        <div className="flex gap-1 sm:gap-2 flex-wrap">
          <button
            onClick={() => {
              fetchTemplates();
              setShowApplyTemplateModal(true);
            }}
            className="bg-[#1D1D1F] hover:bg-[#2a2a2a] text-[#67e8f9] px-2 py-1 rounded text-xs flex items-center"
          >
            <i className="fas fa-file-import mr-1"></i>
            Apply Template
          </button>
          <button
            onClick={() => setShowTemplateModal(true)}
            className="bg-[#1D1D1F] hover:bg-[#2a2a2a] text-[#67e8f9] px-2 py-1 rounded text-xs flex items-center"
          >
            <i className="fas fa-save mr-1"></i>
            Save as Template
          </button>
          <button
            onClick={() => setShowNotes(!showNotes)}
            className="bg-[#1D1D1F] hover:bg-[#2a2a2a] text-[#67e8f9] px-2 py-1 rounded text-xs flex items-center"
          >
            <i className="fas fa-sticky-note mr-1"></i>
            Notes
          </button>
          <button
            onClick={() => setEditMode(!editMode)}
            className={`${
              editMode
                ? "bg-[#67e8f9] text-[#1D1D1F] hover:bg-[#a5f3ff]"
                : "bg-[#1D1D1F] hover:bg-[#2a2a2a] text-[#67e8f9]"
            } px-2 py-1 rounded text-xs flex items-center`}
          >
            <i className={`fas ${editMode ? "fa-check" : "fa-edit"} mr-1`}></i>
            {editMode ? "Done Editing" : "Edit Schedule"}
          </button>
          {isEdited && (
            <button
              onClick={handleSave}
              className="bg-[#10b981] hover:bg-[#0d9668] text-white px-2 py-1 rounded text-xs flex items-center"
            >
              <i className="fas fa-save mr-1"></i>
              Save Changes
            </button>
          )}
        </div>
      </div>

      {showWeekSelector && (
        <div className="mb-3 bg-[#1D1D1F] p-2 rounded">
          <h3 className="text-sm font-medium mb-2">Select Week:</h3>
          <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-2">
            {availableWeeks.map((week, index) => (
              <button
                key={index}
                onClick={() => handleWeekChange(week)}
                className={`px-2 py-1 rounded text-xs ${
                  selectedWeek && selectedWeek.weekNumber === week.weekNumber
                    ? "bg-[#67e8f9] text-[#1D1D1F]"
                    : "bg-[#2A2A2A] text-white hover:bg-[#3A3A3A]"
                }`}
              >
                Week {week.weekNumber} ({week.dateRange})
              </button>
            ))}
          </div>
        </div>
      )}

      {showNotes && (
        <div className="mb-3 bg-[#1D1D1F] p-2 rounded">
          <h3 className="text-sm font-medium mb-2">Notes:</h3>
          <textarea
            value={notes}
            onChange={(e) => setNotes(e.target.value)}
            className="w-full bg-[#2A2A2A] text-white rounded p-2 text-sm"
            rows={3}
            placeholder="Add notes about this schedule..."
          ></textarea>
        </div>
      )}

      <div className="mb-2 bg-[#1D1D1F] rounded-lg p-1 h-[20px] overflow-hidden">
        <div className="flex items-center h-full">
          <span className="text-[10px] text-white font-medium mr-1">
            Operatori:
          </span>
          <div className="flex-1 overflow-x-auto whitespace-nowrap h-full flex items-center">
            {operators.map((operator, index) => (
              <div
                key={index}
                draggable={editMode}
                onDragStart={(e) => {
                  e.dataTransfer.setData("text/plain", operator);
                  handleDragStart(e, operator);
                }}
                className="bg-[#2A2A2A] text-white text-[8px] rounded px-1 py-0.5 mr-1 cursor-grab hover:bg-[#3A3A3A] active:cursor-grabbing h-[16px] flex items-center"
              >
                <i className="fas fa-user-circle mr-0.5 text-[#67e8f9] text-[8px]"></i>
                {operator}
              </div>
            ))}
            {editMode && (
              <button
                onClick={handleAddOperator}
                className="bg-[#2A2A2A] text-[#67e8f9] text-[8px] rounded px-1 py-0.5 hover:bg-[#3A3A3A] h-[16px] flex items-center"
              >
                <i className="fas fa-plus text-[8px]"></i>
              </button>
            )}
          </div>
        </div>
      </div>

      <div className="overflow-x-auto">
        <table className="min-w-full border-collapse">
          <thead>
            <tr>
              <th className="border border-[#2A2A2A] bg-[#1D1D1F] p-1 text-xs">
                Date/Day
              </th>
              <th className="border border-[#2A2A2A] bg-[#1D1D1F] p-1 text-xs">
                Shift
              </th>
              {vehicleKeys.map((key) => (
                <th
                  key={key}
                  className="border border-[#2A2A2A] bg-[#1D1D1F] p-1 text-xs"
                >
                  {key}
                </th>
              ))}
            </tr>
          </thead>
          <tbody>
            {data.map((day, dayIndex) => (
              <React.Fragment key={dayIndex}>
                {day.shifts.map((shift, shiftIndex) => (
                  <tr key={`${dayIndex}-${shiftIndex}`}>
                    {shiftIndex === 0 && (
                      <td
                        rowSpan={day.shifts.length}
                        className="border border-[#2A2A2A] bg-[#1D1D1F] p-1 text-center text-xs"
                      >
                        <div className="font-medium">{day.date}</div>
                        <div className="text-[#67e8f9]">{day.day}</div>
                      </td>
                    )}
                    <td className="border border-[#2A2A2A] bg-[#1D1D1F] p-1 text-xs">
                      {shift.time}
                    </td>
                    {vehicleKeys.map((key) => (
                      <td
                        key={`${dayIndex}-${shiftIndex}-${key}`}
                        className={`border border-[#2A2A2A] p-1 text-center text-xs ${
                          editMode ? "cursor-pointer" : ""
                        }`}
                        onDragOver={editMode ? handleDragOver : null}
                        onDrop={
                          editMode
                            ? (e) => handleDrop(e, dayIndex, shiftIndex, key)
                            : null
                        }
                        onClick={
                          editMode
                            ? () => handleCellClick(dayIndex, shiftIndex, key)
                            : null
                        }
                      >
                        {shift.operators[key] ? (
                          <div className="bg-[#2A2A2A] rounded px-1 py-0.5 inline-block">
                            {shift.operators[key]}
                          </div>
                        ) : editMode ? (
                          <div className="text-[#4A4A4A]">Drop here</div>
                        ) : null}
                      </td>
                    ))}
                  </tr>
                ))}
              </React.Fragment>
            ))}
          </tbody>
        </table>
      </div>

      {showSaveConfirmation && (
        <div className="fixed bottom-4 right-4 bg-[#10b981] text-white px-4 py-2 rounded shadow-lg animate-fade-in">
          <div className="flex items-center">
            <i className="fas fa-check-circle mr-2"></i>
            Schedule saved successfully!
          </div>
        </div>
      )}

      {showTemplateModal && (
        <div className="fixed inset-0 bg-black/70 flex items-center justify-center z-50">
          <div className="bg-[#1D1D1F] rounded-lg p-4 w-[90%] max-w-md">
            <h3 className="text-lg font-semibold mb-3">Save as Template</h3>
            <input
              type="text"
              placeholder="Template name"
              value={templateName}
              onChange={(e) => setTemplateName(e.target.value)}
              className="w-full bg-[#2A2A2A] text-white rounded px-3 py-2 mb-3"
            />
            <div className="flex justify-end gap-2">
              <button
                onClick={() => setShowTemplateModal(false)}
                className="bg-[#2A2A2A] hover:bg-[#3A3A3A] text-white px-3 py-1 rounded"
              >
                Cancel
              </button>
              <button
                onClick={saveAsTemplate}
                className="bg-[#67e8f9] hover:bg-[#a5f3ff] text-[#1D1D1F] px-3 py-1 rounded"
              >
                Save
              </button>
            </div>
          </div>
        </div>
      )}

      {showApplyTemplateModal && (
        <div className="fixed inset-0 bg-black/70 flex items-center justify-center z-50">
          <div className="bg-[#1D1D1F] rounded-lg p-4 w-[90%] max-w-md">
            <h3 className="text-lg font-semibold mb-3">Apply Template</h3>
            {loadingTemplates ? (
              <div className="text-center py-4">
                <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-[#67e8f9] mx-auto"></div>
                <p className="mt-2">Loading templates...</p>
              </div>
            ) : templates.length === 0 ? (
              <p className="text-center py-4">No templates available</p>
            ) : (
              <div className="max-h-[300px] overflow-y-auto mb-3">
                {templates.map((template) => (
                  <div
                    key={template.id}
                    className={`p-2 mb-2 rounded flex justify-between items-center ${
                      selectedTemplate === template.id
                        ? "bg-[#67e8f9] text-[#1D1D1F]"
                        : "bg-[#2A2A2A] text-white hover:bg-[#3A3A3A]"
                    }`}
                    onClick={() => setSelectedTemplate(template.id)}
                  >
                    <span>{template.name}</span>
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        handleDeleteTemplate(template.id);
                      }}
                      className={`px-2 py-1 rounded ${
                        selectedTemplate === template.id
                          ? "bg-[#1D1D1F] text-[#67e8f9] hover:bg-[#2A2A2A]"
                          : "bg-[#1D1D1F] text-[#f43f5e] hover:bg-[#2A2A2A]"
                      }`}
                    >
                      <i className="fas fa-trash-alt"></i>
                    </button>
                  </div>
                ))}
              </div>
            )}
            <div className="flex justify-end gap-2">
              <button
                onClick={() => setShowApplyTemplateModal(false)}
                className="bg-[#2A2A2A] hover:bg-[#3A3A3A] text-white px-3 py-1 rounded"
              >
                Cancel
              </button>
              <button
                onClick={handleApplyTemplate}
                disabled={!selectedTemplate || loadingTemplates}
                className={`${
                  !selectedTemplate || loadingTemplates
                    ? "bg-[#4A4A4A] cursor-not-allowed"
                    : "bg-[#67e8f9] hover:bg-[#a5f3ff] text-[#1D1D1F]"
                } px-3 py-1 rounded`}
              >
                Apply
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

function StoryComponent() {
  const mockOperators = [
    "John Doe",
    "Jane Smith",
    "Mark Johnson",
    "Emily Wilson",
    "Michael Brown",
    "Sarah Davis",
    "Robert Miller",
  ];

  const mockData = [
    {
      date: "01.01",
      day: "P",
      shifts: [
        {
          time: "08.00-16.00",
          operators: {
            "M58-J-467": "John Doe",
            "M53-E-929": "Jane Smith",
            "A35-J-924": "",
          },
        },
        {
          time: "20.00-04.00",
          operators: {
            "M58-J-467": "",
            "M53-E-929": "Mark Johnson",
            "A35-J-924": "",
          },
        },
      ],
    },
    {
      date: "02.01",
      day: "U",
      shifts: [
        {
          time: "08.00-16.00",
          operators: {
            "M58-J-467": "Jane Smith",
            "M53-E-929": "",
            "A35-J-924": "John Doe",
          },
        },
        {
          time: "20.00-04.00",
          operators: {
            "M58-J-467": "Mark Johnson",
            "M53-E-929": "",
            "A35-J-924": "",
          },
        },
      ],
    },
  ];

  const mockWeeks = [
    { weekNumber: 1, year: 2025, dateRange: "01.01 - 07.01" },
    { weekNumber: 2, year: 2025, dateRange: "08.01 - 14.01" },
    { weekNumber: 3, year: 2025, dateRange: "15.01 - 21.01" },
  ];

  const handleSave = (data) => {
    console.log("Saving data:", data);
  };

  const handleWeekChange = (week) => {
    console.log("Week changed to:", week);
  };

  return (
    <div className="p-4 bg-[#121214] min-h-screen">
      <h2 className="text-white text-xl mb-4">BinBin Compact Component</h2>

      <div className="mb-8">
        <h3 className="text-white text-lg mb-2">Default View</h3>
        <MainComponent
          initialOperators={mockOperators}
          initialData={mockData}
          availableWeeks={mockWeeks}
          onSave={handleSave}
          onWeekChange={handleWeekChange}
        />
      </div>

      <div className="mb-8">
        <h3 className="text-white text-lg mb-2">With Few Operators</h3>
        <MainComponent
          initialOperators={mockOperators.slice(0, 3)}
          initialData={mockData}
          availableWeeks={mockWeeks}
          onSave={handleSave}
          onWeekChange={handleWeekChange}
        />
      </div>

      <div>
        <h3 className="text-white text-lg mb-2">With Many Operators</h3>
        <MainComponent
          initialOperators={[
            ...mockOperators,
            ...mockOperators.map((op) => `${op} (Shift 2)`),
          ]}
          initialData={mockData}
          availableWeeks={mockWeeks}
          onSave={handleSave}
          onWeekChange={handleWeekChange}
        />
      </div>
    </div>
  );
}

export default MainComponent;