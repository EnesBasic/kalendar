"use client";
import React from "react";

function MainComponent({
  operators = [],
  machines = [],
  shifts = [],
  days = [],
  schedule = {},
  onScheduleChange = () => {},
  readOnly = false,
}) {
  const [draggedOperator, setDraggedOperator] = React.useState(null);
  const [searchTerm, setSearchTerm] = React.useState("");
  const [selectedShift, setSelectedShift] = React.useState("all");
  const [selectedDay, setSelectedDay] = React.useState("all");
  const [selectedMachine, setSelectedMachine] = React.useState("all");

  const filteredOperators = React.useMemo(() => {
    return operators.filter((operator) =>
      operator.toLowerCase().includes(searchTerm.toLowerCase())
    );
  }, [operators, searchTerm]);

  const handleDragStart = (operator) => {
    if (readOnly) return;
    setDraggedOperator(operator);
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    if (readOnly) return;
  };

  const handleDrop = (day, shift, machine) => {
    if (readOnly || !draggedOperator) return;

    const newSchedule = { ...schedule };

    if (!newSchedule[day]) {
      newSchedule[day] = {};
    }

    if (!newSchedule[day][shift]) {
      newSchedule[day][shift] = {};
    }

    newSchedule[day][shift][machine] = draggedOperator;

    onScheduleChange(newSchedule);
    setDraggedOperator(null);
  };

  const handleRemoveOperator = (day, shift, machine) => {
    if (readOnly) return;

    const newSchedule = { ...schedule };

    if (
      newSchedule[day] &&
      newSchedule[day][shift] &&
      newSchedule[day][shift][machine]
    ) {
      newSchedule[day][shift][machine] = "";
      onScheduleChange(newSchedule);
    }
  };

  const isOperatorAssigned = (operator) => {
    for (const day in schedule) {
      for (const shift in schedule[day]) {
        for (const machine in schedule[day][shift]) {
          if (schedule[day][shift][machine] === operator) {
            return true;
          }
        }
      }
    }
    return false;
  };

  const getAssignmentCount = (operator) => {
    let count = 0;
    for (const day in schedule) {
      for (const shift in schedule[day]) {
        for (const machine in schedule[day][shift]) {
          if (schedule[day][shift][machine] === operator) {
            count++;
          }
        }
      }
    }
    return count;
  };

  const getFilteredSchedule = () => {
    const filtered = {};

    for (const day in schedule) {
      if (selectedDay !== "all" && day !== selectedDay) continue;

      filtered[day] = {};

      for (const shift in schedule[day]) {
        if (selectedShift !== "all" && shift !== selectedShift) continue;

        filtered[day][shift] = {};

        for (const machine in schedule[day][shift]) {
          if (selectedMachine !== "all" && machine !== selectedMachine)
            continue;

          filtered[day][shift][machine] = schedule[day][shift][machine];
        }
      }
    }

    return filtered;
  };

  return (
    <div className="bg-[#121214] text-white p-4 rounded-lg shadow-lg font-inter">
      <div className="mb-6">
        <h2 className="text-xl font-bold mb-4">Operator Assignment</h2>

        <div className="flex flex-col md:flex-row gap-4 mb-4">
          <div className="flex-1">
            <label className="block text-sm font-medium mb-1">
              Search Operators
            </label>
            <input
              type="text"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              placeholder="Search operators..."
              className="w-full bg-[#1D1D1F] border border-[#2A2A2A] rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-[#67e8f9]"
            />
          </div>

          <div>
            <label className="block text-sm font-medium mb-1">
              Filter by Day
            </label>
            <select
              value={selectedDay}
              onChange={(e) => setSelectedDay(e.target.value)}
              className="w-full bg-[#1D1D1F] border border-[#2A2A2A] rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-[#67e8f9]"
            >
              <option value="all">All Days</option>
              {days.map((day) => (
                <option key={day} value={day}>
                  {day}
                </option>
              ))}
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium mb-1">
              Filter by Shift
            </label>
            <select
              value={selectedShift}
              onChange={(e) => setSelectedShift(e.target.value)}
              className="w-full bg-[#1D1D1F] border border-[#2A2A2A] rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-[#67e8f9]"
            >
              <option value="all">All Shifts</option>
              {shifts.map((shift) => (
                <option key={shift} value={shift}>
                  {shift}
                </option>
              ))}
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium mb-1">
              Filter by Machine
            </label>
            <select
              value={selectedMachine}
              onChange={(e) => setSelectedMachine(e.target.value)}
              className="w-full bg-[#1D1D1F] border border-[#2A2A2A] rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-[#67e8f9]"
            >
              <option value="all">All Machines</option>
              {machines.map((machine) => (
                <option key={machine} value={machine}>
                  {machine}
                </option>
              ))}
            </select>
          </div>
        </div>

        <div className="bg-[#1D1D1F] border border-[#2A2A2A] rounded-lg p-3 mb-6">
          <h3 className="text-sm font-medium mb-2">Available Operators</h3>
          <div className="max-h-[120px] overflow-y-auto pr-2">
            <div className="flex flex-wrap gap-2">
              {filteredOperators.map((operator) => (
                <div
                  key={operator}
                  draggable={!readOnly}
                  onDragStart={() => handleDragStart(operator)}
                  className={`inline-flex items-center px-2 py-1 rounded text-sm ${
                    isOperatorAssigned(operator)
                      ? "bg-[#2A2A2A] text-[#86868B]"
                      : "bg-[#3A3A3A] text-white cursor-grab"
                  } ${readOnly ? "cursor-default" : ""}`}
                >
                  <span>{operator}</span>
                  {getAssignmentCount(operator) > 0 && (
                    <span className="ml-1 text-xs bg-[#67e8f9] text-black rounded-full w-4 h-4 flex items-center justify-center">
                      {getAssignmentCount(operator)}
                    </span>
                  )}
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      <div className="overflow-x-auto">
        <table className="min-w-full border-collapse">
          <thead>
            <tr>
              <th className="border border-[#2A2A2A] px-3 py-2 bg-[#1D1D1F] text-left">
                Day
              </th>
              <th className="border border-[#2A2A2A] px-3 py-2 bg-[#1D1D1F] text-left">
                Shift
              </th>
              {machines.map((machine) => (
                <th
                  key={machine}
                  className="border border-[#2A2A2A] px-3 py-2 bg-[#1D1D1F] text-left"
                >
                  {machine}
                </th>
              ))}
            </tr>
          </thead>
          <tbody>
            {Object.entries(getFilteredSchedule()).map(([day, shifts]) =>
              Object.entries(shifts).map(([shift, machineAssignments]) => (
                <tr key={`${day}-${shift}`}>
                  <td className="border border-[#2A2A2A] px-3 py-2">{day}</td>
                  <td className="border border-[#2A2A2A] px-3 py-2">{shift}</td>
                  {machines.map((machine) => (
                    <td
                      key={`${day}-${shift}-${machine}`}
                      className="border border-[#2A2A2A] px-3 py-2"
                      onDragOver={handleDragOver}
                      onDrop={() => handleDrop(day, shift, machine)}
                    >
                      {machineAssignments[machine] ? (
                        <div className="flex items-center justify-between bg-[#3A3A3A] px-2 py-1 rounded">
                          <span>{machineAssignments[machine]}</span>
                          {!readOnly && (
                            <button
                              onClick={() =>
                                handleRemoveOperator(day, shift, machine)
                              }
                              className="ml-2 text-[#FF6B6B] hover:text-[#FF4040] focus:outline-none"
                            >
                              <i className="fas fa-times"></i>
                            </button>
                          )}
                        </div>
                      ) : (
                        <div className="h-7 flex items-center justify-center text-[#86868B] text-sm">
                          {readOnly ? "-" : "Drop here"}
                        </div>
                      )}
                    </td>
                  ))}
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}

function StoryComponent() {
  const [schedule, setSchedule] = React.useState({
    Monday: {
      Morning: {
        "Machine A": "John Doe",
        "Machine B": "Jane Smith",
        "Machine C": "",
      },
      Evening: {
        "Machine A": "",
        "Machine B": "Mark Johnson",
        "Machine C": "Emily Davis",
      },
    },
    Tuesday: {
      Morning: {
        "Machine A": "Jane Smith",
        "Machine B": "",
        "Machine C": "John Doe",
      },
      Evening: {
        "Machine A": "Mark Johnson",
        "Machine B": "Emily Davis",
        "Machine C": "",
      },
    },
    Wednesday: {
      Morning: {
        "Machine A": "Emily Davis",
        "Machine B": "John Doe",
        "Machine C": "",
      },
      Evening: {
        "Machine A": "",
        "Machine B": "Jane Smith",
        "Machine C": "Mark Johnson",
      },
    },
  });

  const operators = [
    "John Doe",
    "Jane Smith",
    "Mark Johnson",
    "Emily Davis",
    "Michael Brown",
    "Sarah Wilson",
    "David Taylor",
    "Lisa Anderson",
    "Robert Martinez",
    "Jennifer Garcia",
  ];

  const machines = ["Machine A", "Machine B", "Machine C"];
  const shifts = ["Morning", "Evening"];
  const days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"];

  return (
    <div className="p-4 max-w-6xl mx-auto">
      <h1 className="text-2xl font-bold mb-6">BinBin with Compact Operators</h1>

      <div className="mb-8">
        <h2 className="text-xl font-semibold mb-4">Interactive Version</h2>
        <MainComponent
          operators={operators}
          machines={machines}
          shifts={shifts}
          days={days}
          schedule={schedule}
          onScheduleChange={setSchedule}
        />
      </div>

      <div className="mb-8">
        <h2 className="text-xl font-semibold mb-4">Read-Only Version</h2>
        <MainComponent
          operators={operators}
          machines={machines}
          shifts={shifts}
          days={days}
          schedule={schedule}
          readOnly={true}
        />
      </div>

      <div>
        <h2 className="text-xl font-semibold mb-4">Empty Schedule</h2>
        <MainComponent
          operators={operators}
          machines={machines}
          shifts={shifts}
          days={days}
          schedule={{}}
        />
      </div>
    </div>
  );
}
export default MainComponent;